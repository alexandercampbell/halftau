
x : Int -> Int
x k = k + 1

fn x k

fn fold f l s $


fn reverse xs $
	concat (reverse $ tail xs) $ head xs



:: (Y -> Z) -> (X -> Y) -> (X -> Z)
comp f g $
	\x -> f $ g x


ns math

fn map [f xs] $

Num -> Int -> Num
pow x n $
	(assert- "Negative exponents not allowed" >= n 0)
	fold * 1 $ repeat n x

:: Int -> Int
factorial n $
	fold * 1 [1..n]

assert $ = 5 $ math/fact 3

fn dec x $ - x 1
fn inc x $ + x 1

(fn x [k] (k + 3))




mk-monster name position x y =
	{ name name
	, x x
	, y y
	}

my-monster = mk-monster "goblin" 32 32
monsters = [my-monster]
monsters_past_x10 = filter (\m $ > 10 m.x) monsters

inc x = + x 1
dec x = - x 1


fn inc x $ + x 1
fn dec x $ - x 1

fn xs [1 2 3 4]
fn double x $ * 2 x
fn doubled values $ map double values
fn doubled_xs $ doubled_values xs
assert $ = doubled_xs [2 4 6 8]


inc x = + x 1
dec x = - x 1
double x = * 2 x
double = * 2

doubled = map double
xs = [1 2 3 4]
doubled_xs = doubled xs

inc x = + x 1
dec x = - x 1
double x = * 2 x

xs = [1 2 3 4]
doubled_xs = double xs
double = * 2
triple = * 3
compose fn1 fn2 x = fn2 $ fn1 x
sextuple = compose double triangle


