; vi: ft=clojure

(def defmacro
  (macro [macro-name macro-args macro-body]
         (def macro-name (macro macro-args macro-body))))

(defmacro defn [fn-name fn-args fn-body]
  (def fn-name (fn fn-args fn-body)))

(defn map [f elts]
  (if (empty? elts) '()
    (cons (f (car elts)) (map f (cdr elts)))))

(defn filter [pred elts]
  (if (empty? elts) '()
    (if (pred (car elts))
      (cons (car elts) (filter pred (cdr elts)))
      (filter pred (cdr elts)))))

(defn foldl [fn acc elts]
  (if (empty? elts) acc
    (foldl fn (fn acc (car elts)) (cdr elts))))

(defn member [x elts]
  (if (empty? elts) false
    (if (= x (car elts)) true
      (member x (cdr elts)))))

